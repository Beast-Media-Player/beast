generator client {
  provider = "prisma-client-js"
  output   = "../src/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LibraryType {
  MOVIES
  TV_SHOWS
}

enum StreamType {
  video
  audio
  subtitle
  attachment
}

model Library {
  id            String      @id @unique @default(uuid())
  type          LibraryType
  name          String      @unique
  path          String      @unique
  medias        Media[]
  createdAt     DateTime    @default(now())

  shows         Show[]
  movies        Movie[]
  libraryAccess LibraryAccess[]
}

model Stream {
  id          String     @id @unique @default(uuid())
  name        String
  streamIndex Int
  type        StreamType

  media       Media?  @relation(fields: [mediaId], references: [id])
  mediaId     String?

  @@unique([mediaId, streamIndex])
}

model Media {
  id        String   @id @unique @default(uuid())
  path      String   @unique
  library   Library  @relation(fields: [libraryId], references: [id])
  libraryId String
  createdAt DateTime @default(now())
  streams   Stream[]
  width     Int
  height    Int
  bitrate   Int
  duration  Float

  episode   Episode?
  movie     Movie?
}

model Episode {
  id              String @id @unique @default(uuid())

  media           Media  @relation(fields: [mediaId], references: [id])
  mediaId         String @unique

  season          Season? @relation(fields: [seasonId], references: [id])
  seasonId        String?

  overview        String?
  name            String
  episode_number  Int
  images          String[]

  @@unique([seasonId, episode_number])
}

model Season {
  id            String @id @unique @default(uuid())
  name          String
  season_number Int

  overview      String?
  episodes      Episode[]
  show          Show      @relation(fields: [showId], references: [id])
  showId        String
  images        String[]

  @@unique([showId, season_number])
}

model Show {
  id            String   @id @unique @default(uuid())
  tvmazeId      Int      @unique
  name          String
  path          String
  overview      String?
  seasons       Season[]
  images        String[]

  library       Library @relation(fields: [libraryId], references: [id])
  libraryId     String
}

model Movie {
  id            String   @id @unique @default(uuid())
  name          String
  overview      String?
  images        String[]
  tmdbId        Int      @unique

  media         Media  @relation(fields: [mediaId], references: [id])
  mediaId       String @unique

  library       Library @relation(fields: [libraryId], references: [id])
  libraryId     String
}

model User {
  id            String @id @unique @default(uuid())

  email         String @unique
  password      String
  isOwner       Boolean

  user          LibraryAccess[]
}

model Server {
  id            String @id @unique @default(uuid())
  name          String
}

enum LibraryAccessType {
  READ
  WRITE
}

model LibraryAccess {
  id          String @id @unique @default(uuid())

  library     Library @relation(fields: [libraryId], references: [id])
  libraryId   String

  user        User @relation(fields: [userId], references: [id])
  userId      String
  access      LibraryAccessType

  @@unique([libraryId, userId, access])
}
