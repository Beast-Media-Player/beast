import { createSignal, onCleanup, onMount } from "solid-js";
import { useWebsockets } from "../../hooks/websockets";

interface SliderProps {
  initialValue: number;
  bufferValue: number;
  maxValue: number;
  onChange?: (value: number) => void;
}
const Slider = (props: SliderProps) => {
  const [value, setValue] = createSignal(props.initialValue || 0);

  const handleChange = (event: Event) => {
    const newValue = +(event.target as HTMLInputElement).value;
    setValue(newValue);
    if (props.onChange) {
      props.onChange(newValue);
    }
  };

  const calculateBufferWidth = () => {
    return `${(props.bufferValue / props.maxValue) * 100}%`;
  };

  const calculateSeekWidth = () => {
    return `${(value() / props.maxValue) * 100}%`;
  };

  return (
    <div class="relative w-full h-2 bg-gray-200 rounded">
      <div
        class="absolute top-0 left-0 h-2 bg-blue-300 rounded"
        style={{ width: calculateBufferWidth() }}
      ></div>
      <div
        class="absolute top-0 left-0 h-2 bg-blue-600 rounded"
        style={{ width: calculateSeekWidth() }}
      ></div>
      <input
        type="range"
        min="0"
        max={props.maxValue}
        value={value()}
        onInput={handleChange}
        class="absolute top-0 w-full h-2 opacity-0 cursor-pointer"
      />
    </div>
  );
};

export function Player({ mediaId }: { mediaId: string }) {
  const { sendWithAck, send, onMessage, socket } = useWebsockets();
  let video: HTMLVideoElement | undefined;
  const [playerStatus, setStatus] = createSignal<{
    time: number;
    duration: number;
    buffer: number;
  }>({ time: 0, duration: 0, buffer: 0 });
  const mediaSource = new MediaSource();
  let sourceBuffer: SourceBuffer;
  let queue: Uint8Array[] = [];

  const createPlayer = () => {
    if (!video) return;
    video.addEventListener("timeupdate", (ev) => {
      if (!video) return;
      setStatus({ time: video.currentTime, duration: 5000, buffer: 0 });
    });
  };

  const closePlayer = () => {
    send({ type: 'client/player/end' })
  }

  onMount(async () => {
    if (!video) return;

    if (!window.MediaSource) {
      throw new Error("MediaSource API is not supported in this browser");
    }
    
    mediaSource.addEventListener('sourceopen', (ev) => {
      console.log('sourceopen: ' + mediaSource.readyState);
      
      mediaSource.duration = 4000;

      sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
      // sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs="hev1.1.6.L93.B0, mp4a.40.2"');
      // sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp8, opus"');
      // sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp9, opus"');
    });

    mediaSource.addEventListener('sourceended', function(e) {
      console.log('sourceended: ' + mediaSource.readyState);
    });

    mediaSource.addEventListener('sourceclose', function(e) {
      console.log('sourceclose: ' + mediaSource.readyState);
    });

    mediaSource.addEventListener('error', function(e) {
      console.log('error: ' + mediaSource.readyState, e);
    });

    window.addEventListener('beforeunload', closePlayer, true)
    window.addEventListener('popstate', closePlayer, true);

    send({ type: 'client/player/start', mediaId })
    socket.on('disconnect', () => {
      send({ type: 'client/player/end' })
    })
    createPlayer();
    video.src = URL.createObjectURL(mediaSource);
    console.log(video.src)
  });

  onCleanup(() => {
    send({ type: 'client/player/end' })
    window.removeEventListener('beforeunload', closePlayer, true)
    window.removeEventListener('popstate', closePlayer, true);
  })

  function updateSourceBuffer() {
      if (queue.length > 0 && !sourceBuffer.updating) {
          sourceBuffer.appendBuffer(queue.shift()!);
      }
  }

  onMessage('server/player/data', ({ data }) => {
    queue.push(new Uint8Array(data));
    updateSourceBuffer();
  })

  return (
    <div>
      <video controls playsinline poster="https://bitdash-a.akamaihd.net/content/sintel/poster.png"></video>
      {/* <video ref={video} controls class="w-full h-screen" autoplay muted></video> */}
      {/* <div class="flex flex-col w-full">
        <button onClick={() => video?.play()}>PLAY</button>
        <button onClick={() => video?.pause()}>PAUSE</button>
        <Slider
          initialValue={playerStatus().time}
          bufferValue={0}
          maxValue={playerStatus().duration}
          // onChange={onSeek}
        ></Slider>
      </div> */}
    </div>
  );
}
